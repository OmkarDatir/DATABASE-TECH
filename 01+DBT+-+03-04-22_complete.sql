-- 1 SOLVE THE BELOW QUESTIONS EACH QUESTION OF 2 MARKS 
  
-- i. WRITE AN SQL QUERY TO FETCH FULLNAME , SALARY , JOINING_DATE AND DEPARTMENT FROM 
-- WORKER TABLE. 
SELECT FIRST_NAME,SALARY,JOINING_DATE, DEPARTMENT FROM Worker;

--     ii.WRITE AN SQL QUERY TO FETCH ID , FULLNAME , SALARY AND DEPARTMENT WHOSE DEPARTMENT 
-- IS HR OR ADMIN 

SELECT WORKER_ID, CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME, SALARY FROM Worker WHERE DEPARTMENT IN ("HR","ADMIN");
--    iii.WRITE AN SQL QUERY TO FETCH ID , FULLNAME , SALARY WHOSE FIRST_NAME ENDS WITH 'a'

SELECT WORKER_ID,CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME, SALARY FROM Worker WHERE SUBSTR(FIRST_NAME,-1) = 'a';
--    iv. WRITE AN SQL QUERY TO FEACH ALL RECORDS OF WORKER TABLE WHO HAVE JOIN IN FEB 2020 

SELECT * FROM Worker WHERE  YEAR(JOINING_DATE) = 2020 AND MONTH(JOINING_DATE) = 4;

--     V. WRITE AN SQL QUERY TO FEACH ALL RECORDS OF WORKER TABLE WHO HAVE SALARY >=50000 
-- AND <=100000.   
 
 SELECT * FROM worker WHERE SALARY BETWEEN 50000 AND 100000;

-- 2 SOLVE THE BELOW QUESTIONS EACH QUESTION OF 3 MARKS  
 
--    i. WRITE AN SQL QUERY TO DISPLAY NUMBER OF WORKER IN EACH DEPARTMENT ALONG WITH 
-- UNIQUE DEPARTMENT NAME 
SELECT COUNT(*) AS WORKER_NUMBER,DEPARTMENT FROM worker GROUP BY DEPARTMENT;

--    ii.WRITE AN SQL QUERY TO DISPLAY DEPARTMENT NAME AND TOTAL BONUS AMOUNT TO BE PAID IN 
-- EACH DEPARTMENT 

SELECT w.DEPARTMENT AS DEPARTMENT_NAME,SUM(b.BONUS_AMOUNT) AS TOTAL_BONUS_AMOUNT
FROM worker w INNER JOIN bonus b ON w.WORKER_ID = b.WORKER_REF_ID GROUP BY w.DEPARTMENT;

--   iii.WRITE AN SQL QUERY TO DISPALY THE FULLNAME , SALARY , TOTAL YEARS OF EXPERIANCE OF 
-- EACH WORKER  

SELECT CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME,
SALARY,
DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(),JOINING_DATE)),'%Y')+0 AS TOTAL_YEARS 
FROM worker;

--OR

SELECT CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME,
SALARY,
FLOOR((DATEDIFF(NOW(),JOINING_DATE))/365) AS TOTAL_YEARS
FROM worker;

--OR

SELECT CONCAT(FIRST_NAME," ",LAST_NAME) AS FULLNAME,
SALARY,
FLOOR(TIMESTAMPDIFF(YEAR,JOINING_DATE,NOW())) AS TOTAL_YEARS
FROM worker;

--    iv.WRITE AN SQL QUERY TO DISPALY THE DETAILS OF THE WORKER WHO IS MANAGER  

SELECT w.WORKER_ID, w.FIRST_NAME, w.LAST_NAME, w.SALARY, w.JOINING_DATE, w.DEPARTMENT, t.WORKER_TITLE
FROM worker w INNER JOIN  title t ON w.WORKER_ID = t.WORKER_REF_ID WHERE WORKER_TITLE='manager';

-- ACTS, Head Quarters, Pune                               
 
-- 3 SOLVE THE BELOW QUESTIONS EACH QUESTION OF 4 MARKS 
 
-- i. CREATE SAMPLE_DB IN MONGO DATABASE  
--    -CREATE COLLECTION IN SIMPLE_DB AS MY_COL 
--      INSERT THE BELOW DATA 
db.mycol.insertMany([ 
  { title: "MongoDB Overview",  description: "MongoDB is no SQL database",  by: "tutorials point", url: "http://www.tutorialspoint.com", tags: ["mongodb", "database", "NoSQL"], likes: 100 }, 
 { 
  title: "NoSQL Database", 
  description: "NoSQL database doesn't have tables", 
  by: "tutorials point", 
  url: "http://www.tutorialspoint.com", 
  tags: ["mongodb", "database", "NoSQL"], 
  likes: 20, 
  comments: [ 
   { 
    user:"user1", 
    message: "My first comment", 
    dateCreated: new Date(2013,11,10,2,35), 
    like: 0 
   } 
  ] 
 } 
]) 

db.mycol.insertOne( 
  { title: "MongoDB Overview",  description: "MongoDB is no SQL database",  by: "tutorials point", url: "http://www.tutorialspoint.com", tags: ["mongodb", "database", "NoSQL"], likes: 100 })

db.mycol.insertOne({ title: "NoSQL Database", description: "NoSQL database doesn't have tables", by: "tutorials point", url: "http://www.tutorialspoint.com", tags: ["mongodb", "database", "NoSQL"], likes: 20, comments: [ { user:"user1", message: "My first comment", dateCreated: new Date(2013,11,10,2,35), like: 0 }]})
 
-- 1.SHOW THE DOCUMENTS THAT HAS LIKES GREATER THAN 10     

db.mycol.find({likes:{$gt:10}});
--link: https://www.tutorialspoint.com/mongodb/mongodb_query_document.htm
-- 2.SHOW THE DOCUMENTS THAT HAS USER NAME AS ‘user1’  

db.mycol.find({"comments.user":"user1"}) 

--   ii. CREATE A FUNCTION IN MYSQL THAT WILL ACCEPT THE ONE INPUT PARAMETER AS WORKER ID 
-- AND BASED ON THE ID 
--       RETURN THE TOTAL SALARY IN EACH DEPARTMENTS 
 
 DROP FUNCTION IF EXISTS 3_4_23.worker;

 DELIMITER &&

 CREATE FUNCTION SalSum(id INT)

   RETURNS INT 
 NOT DETERMINISTIC

 BEGIN
    DECLARE sal_sum INT;
    SELECT SUM(SALARY) into sal_sum 
    FROM worker GROUP BY DEPARTMENT 
    HAVING DEPARTMENT = (SELECT DEPARTMENT FROM worker WHERE WORKER_ID=id);
    return sal_sum;
 END;

 &&
 
 DELIMITER ;
 

SELECT SUM(SALARY) FROM worker 
GROUP BY DEPARTMENT
HAVING DEPARTMENT = (SELECT DEPARTMENT FROM worker WHERE WORKER_ID=1)

-- 4 CREATE A CURSOR IN MYSQL, BY USING THE CURSOR RETURN THE COMMA SEPRATED LIST OF 
-- WORKER NAMES               5 MARKS 
--    eg. Monika , Vishal , Satish , Vipul ......  

CREATE TABLE result (comma_seperated_values VARCHAR(200));

DROP PROCEDURE IF EXISTS Worker_List;

DELIMITER &&

CREATE PROCEDURE Worker_List()

BEGIN
  -- first set up error handler flag
  DECLARE v_flag INT DEFAULT 0;
  DECLARE v_name_str VARCHAR(100);
  DECLARE v_cur CURSOR FOR SELECT FIRST_NAME FROM worker;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_flag = 1;

  OPEN v_cur;
  v_name_str = "";
  read_names : LOOP

    v_name_str = CONCAT(FIRST_NAME,",")
    IF v_flag = 1 THEN 
      FETCH v_cur INTO v_name_str;
      LEAVE read_names;
    END IF
  END LOOP;
  CLOSE v_cur;
  INSERT INTO result VALUES(v_name_str);
  END v_cur;
END;

&&

DELIMITER ;
 
-- 5 CREATE A AFTER INSERT TRIGGER IN MYSQL     ..        5 MARKS  
--   CREATE AN EMP_DETAILS TABLES AS FOLLOWS  
--     ID , FIRST_NAME , LAST_NAME , DEPARTMENT_ID ,SALARY  
--    WHEN AN INSERT HAPPEN INTO THE EMP_DETAILS TABLE INSERT THE  FIRST_NAME , LAST_NAME 
-- AND SALARY INTO THE 
--     EMP_LOG_DETAILS TABLE 

CREATE TABLE EMP_DETAILS (ID INT,FIRST_NAME VARCHAR(20),LAST_NAME VARCHAR(20),DEPARTMENT_ID INT,SALARY DECIMAL(7,2)); 

CREATE TABLE EMP_LOG_DETAILS (FIRST_NAME VARCHAR(20),LAST_NAME VARCHAR(20),SALARY DECIMAL(7,2));

DROP TRIGGER IF EXISTS EmpLog

DELIMITER &&

CREATE TRIGGER EmpLog
AFTER INSERT ON EMP_DETAILS

FOR EACH ROW
BEGIN
  INSERT INTO EMP_LOG_DETAILS VALUES(NEW.FIRST_NAME,NEW.LAST_NAME,NEW.SALARY);
END;

&&

DELIMITER ;

-- test

INSERT INTO EMP_DETAILS VALUES (1,'Rashid','Poonawala',3,440000);

-- OK
